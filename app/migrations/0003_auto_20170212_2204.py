# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2017-02-12 22:04
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('app', '0002_auto_20170211_2339'),
    ]

    operations = [
        migrations.AlterField(
            model_name='brewpidevice',
            name='data_point_log_interval',
            field=models.IntegerField(choices=[(10, '10 Seconds'), (30, '30 Seconds'), (60, '1 Minute'), (120, '2 Minutes'), (300, '5 Minutes'), (600, '10 Minutes'), (1800, '30 Minutes'), (3600, '1 Hour')], default=30, help_text='Time between logged data points'),
        ),
        migrations.AlterField(
            model_name='oldcontrolconstants',
            name='Kd',
            field=models.FloatField(help_text='The derivative of the beer temperature is multiplied by Kd to give the derivative part of the PID value', verbose_name='PID: Kd'),
        ),
        migrations.AlterField(
            model_name='oldcontrolconstants',
            name='Ki',
            field=models.FloatField(help_text='When the integral is active, the error is added to the integral every 30 sec. The result is multiplied by Ki to give the integral part.', verbose_name='PID: Ki'),
        ),
        migrations.AlterField(
            model_name='oldcontrolconstants',
            name='beerFastFilt',
            field=models.IntegerField(help_text='The beer fast filter is used for display and data logging. More filtering gives a smoother line but also more delay.', verbose_name='Beer fast filter delay time'),
        ),
        migrations.AlterField(
            model_name='oldcontrolconstants',
            name='beerSlopeFilt',
            field=models.IntegerField(help_text='The slope is calculated every 30 sec and fed to this filter. More filtering means a smoother fridge setting.', verbose_name='Beer slope filter delay time'),
        ),
        migrations.AlterField(
            model_name='oldcontrolconstants',
            name='beerSlowFilt',
            field=models.IntegerField(help_text='The beer slow filter is used for the control algorithm. The fridge temperature setting is calculated from this filter. Because a small difference in beer temperature cases a large adjustment in the fridge temperature, more smoothing is needed.', verbose_name='Beer slow filter delay time'),
        ),
        migrations.AlterField(
            model_name='oldcontrolconstants',
            name='coolTargetH',
            field=models.FloatField(help_text='When the overshoot lands under this value, the peak is within the target range and the estimator is not adjusted', verbose_name='Cooling target upper bound'),
        ),
        migrations.AlterField(
            model_name='oldcontrolconstants',
            name='coolTargetL',
            field=models.FloatField(help_text='When the overshoot lands above this value, the peak is within the target range and the estimator is not adjusted', verbose_name='Cooling target lower bound'),
        ),
        migrations.AlterField(
            model_name='oldcontrolconstants',
            name='fridgeFastFilt',
            field=models.IntegerField(help_text='The fridge fast filter is used for on-off control, display, and logging. It needs to have a small delay.', verbose_name='Fridge fast filter delay time'),
        ),
        migrations.AlterField(
            model_name='oldcontrolconstants',
            name='fridgeSlopeFilt',
            field=models.IntegerField(help_text='Fridge slope filter is not used in this revision of the firmware.', verbose_name='Fridge slope filter delay time'),
        ),
        migrations.AlterField(
            model_name='oldcontrolconstants',
            name='fridgeSlowFilt',
            field=models.IntegerField(help_text='The fridge slow filter is used for peak detection to adjust the overshoot estimators. More smoothing is needed to prevent small fluctuations from being recognized as peaks.', verbose_name='Fridge slow filter delay time'),
        ),
        migrations.AlterField(
            model_name='oldcontrolconstants',
            name='heatTargetH',
            field=models.FloatField(help_text='When the overshoot lands under this value, the peak is within the target range and the estimator is not adjusted', verbose_name='Heating target upper bound'),
        ),
        migrations.AlterField(
            model_name='oldcontrolconstants',
            name='heatTargetL',
            field=models.FloatField(help_text='When the overshoot lands above this value, the peak is within the target range and the estimator is not adjusted', verbose_name='Heating target lower bound'),
        ),
        migrations.AlterField(
            model_name='oldcontrolconstants',
            name='hs',
            field=models.IntegerField(choices=[(1, 'YES'), (0, 'No')], default=0, help_text='If this options is set to Yes the light will be used as a heater', verbose_name='Use half steps for rotary encoder?'),
        ),
        migrations.AlterField(
            model_name='oldcontrolconstants',
            name='iMaxErr',
            field=models.FloatField(help_text='The integral is only active when the temperature is close to the target temperature. This is the maximum error for which the integral is active.', verbose_name='Integrator: Max temp error C'),
        ),
        migrations.AlterField(
            model_name='oldcontrolconstants',
            name='idleRangeH',
            field=models.FloatField(help_text='When the fridge temperature is within this range, it will not heat or cool, regardless of other settings', verbose_name='Temperature idle range top'),
        ),
        migrations.AlterField(
            model_name='oldcontrolconstants',
            name='idleRangeL',
            field=models.FloatField(help_text='When the fridge temperature is within this range, it will not heat or cool, regardless of other settings', verbose_name='Temperature idle range bottom'),
        ),
        migrations.AlterField(
            model_name='oldcontrolconstants',
            name='lah',
            field=models.IntegerField(choices=[(1, 'YES'), (0, 'No')], default=0, help_text='If set to yes the heater is assumed to be a light', verbose_name='Using light as heater?'),
        ),
        migrations.AlterField(
            model_name='oldcontrolconstants',
            name='maxCoolTimeForEst',
            field=models.IntegerField(help_text='Maximum time the fridge has been cooling is used to estimate overshoot. This is the maximum time that is taken into account.', verbose_name='Maximum time in seconds for cooling overshoot estimator'),
        ),
        migrations.AlterField(
            model_name='oldcontrolconstants',
            name='maxHeatTimeForEst',
            field=models.IntegerField(help_text='The time the fridge has been heating is used to estimate overshoot. This is the maximum time that is taken into account.', verbose_name='Maximum time in seconds for heating overshoot estimator'),
        ),
        migrations.AlterField(
            model_name='oldcontrolconstants',
            name='tempFormat',
            field=models.CharField(choices=[('F', 'Fahrenheit'), ('C', 'Celsius')], default='F', max_length=1, verbose_name='Temperature format'),
        ),
        migrations.AlterField(
            model_name='oldcontrolconstants',
            name='tempSetMax',
            field=models.FloatField(help_text="The fridge and beer temperatures cannot go above this value. Units are specified by 'Temperature format' below.", verbose_name='Max Temperature'),
        ),
        migrations.AlterField(
            model_name='oldcontrolconstants',
            name='tempSetMin',
            field=models.FloatField(help_text="The fridge and beer temperatures cannot go below this value. Units are specified by 'Temperature format' below.", verbose_name='Min Temperature'),
        ),
    ]
