# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2016-12-29 04:34
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    replaces = [('app', '0001_initial'), ('app', '0002_auto_20161121_1528'), ('app', '0003_auto_20161127_0702'), ('app', '0004_auto_20161218_1925'), ('app', '0005_brewpidevice_active_profile')]

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Beer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='BeerLogPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('beer_temp', models.DecimalField(decimal_places=10, max_digits=13, null=True)),
                ('beer_set', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('beer_ann', models.CharField(max_length=255, null=True)),
                ('fridge_temp', models.DecimalField(decimal_places=10, max_digits=13, null=True)),
                ('fridge_set', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('fridge_ann', models.CharField(max_length=255, null=True)),
                ('room_temp', models.DecimalField(decimal_places=10, max_digits=13, null=True)),
                ('state', models.IntegerField(choices=[(0, 'IDLE'), (1, 'STATE_OFF'), (2, 'DOOR_OPEN'), (3, 'HEATING'), (4, 'COOLING'), (5, 'WAITING_TO_COOL'), (6, 'WAITING_TO_HEAT'), (7, 'WAITING_FOR_PEAK_DETECT'), (8, 'COOLING_MIN_TIME'), (9, 'HEATING_MIN_TIME')], default=0)),
                ('log_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('temp_format', models.CharField(choices=[('C', 'Celsius'), ('F', 'Fahrenheit')], default='C', max_length=1)),
                ('associated_beer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Beer')),
            ],
        ),
        migrations.CreateModel(
            name='BrewPiDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_name', models.CharField(help_text='Unique name for this device', max_length=48, unique=True)),
                ('temp_format', models.CharField(choices=[('C', 'Celsius'), ('F', 'Fahrenheit')], default='C', help_text='Temperature units', max_length=1)),
                ('data_point_log_interval', models.IntegerField(choices=[(10, '10 Seconds'), (30, '30 Seconds'), (60, '1 Minute'), (120, '2 Minutes'), (300, '5 Minutes'), (600, '10 Minutes'), (1800, '30 Minutes'), (3600, '1 Hour')], default=10, help_text='Time between logged data points')),
                ('has_old_brewpi_www', models.BooleanField(default=True, help_text='Does this device also have the old-style (PHP-based) brewpi-www installed somewhere?')),
                ('wwwPath', models.CharField(default='/var/www', help_text='Path to the BrewPi-www installation (deprecated??)', max_length=255)),
                ('useInetSocket', models.BooleanField(default=False, help_text='Whether or not to use an internet socket (rather than local)')),
                ('socketPort', models.IntegerField(default=2222, help_text='The internet socket to use (only used if useInetSocket above is "True")', validators=[django.core.validators.MinValueValidator(10, 'Port must be 10 or higher'), django.core.validators.MaxValueValidator(65535, 'Port must be 65535 or lower')])),
                ('socketHost', models.CharField(default='localhost', help_text='The interface to bind for the internet socket (only used if useInetSocket above is "True")', max_length=128)),
                ('logging_status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('stopped', 'Stopped')], default='stopped', help_text='Data logging status', max_length=10)),
                ('script_path', models.CharField(default='/home/brewpi/', help_text='Path to the BrewPi script (deprecated??)', max_length=255)),
                ('serial_port', models.CharField(default='auto', help_text='Serial port to which the BrewPi device is connected', max_length=255)),
                ('serial_alt_port', models.CharField(default='None', help_text='Alternate serial port to which the BrewPi device is connected (??)', max_length=255)),
                ('board_type', models.CharField(choices=[('uno', 'Arduino Uno (or compatible)'), ('esp8266', 'ESP8266'), ('leonardo', 'Arduino Leonardo'), ('core', 'Core'), ('photon', 'Photon')], default='uno', help_text='Board type to which BrewPi is connected', max_length=10)),
                ('process_id', models.IntegerField(default=0)),
                ('socket_name', models.CharField(default='BEERSOCKET', help_text='Name of the file-based socket (Only used if useInetSocket is False)', max_length=25)),
                ('connection_type', models.CharField(choices=[('serial', 'Serial (Arduino and others)'), ('wifi', 'WiFi (ESP8266)')], default='serial', help_text='Type of connection between the Raspberry Pi and the hardware', max_length=15)),
                ('wifi_host', models.CharField(default='None', help_text='mDNS host name or IP address for WiFi connected hardware (only used if connection_type is wifi)', max_length=40)),
                ('wifi_port', models.IntegerField(default=23, help_text='The internet socket to use (only used if connection_type is wifi)', validators=[django.core.validators.MinValueValidator(10, 'Port must be 10 or higher'), django.core.validators.MaxValueValidator(65535, 'Port must be 65535 or lower')])),
                ('active_beer', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Beer')),
            ],
        ),
        migrations.CreateModel(
            name='InstallSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time_format', models.CharField(default='yy-mm-dd', max_length=20)),
                ('date_time_format_display', models.CharField(choices=[('mm/dd/yy', 'mm/dd/yy'), ('dd/mm/yy', 'dd/mm/yy')], default='mm/dd/yy', max_length=20)),
                ('brewery_name', models.CharField(default='BrewPi-Django', help_text='Name to be displayed in the upper left of each page', max_length=25)),
                ('require_login_for_dashboard', models.BooleanField(default=False, help_text='Should a logged out user be able to see device status?')),
            ],
        ),
        migrations.AddField(
            model_name='beer',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.BrewPiDevice'),
        ),
        migrations.CreateModel(
            name='PinDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(default='', max_length=16)),
                ('type', models.CharField(default='', max_length=8)),
                ('pin', models.IntegerField(default=-1)),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SensorDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, default='', max_length=16)),
                ('index', models.IntegerField(default=-1)),
                ('type', models.IntegerField(default=0)),
                ('chamber', models.IntegerField(default=0)),
                ('beer', models.IntegerField(default=0)),
                ('device_function', models.IntegerField(choices=[(0, 'NONE'), (1, 'CHAMBER_DOOR'), (2, 'CHAMBER_HEAT'), (3, 'CHAMBER_COOL'), (4, 'CHAMBER_LIGHT'), (5, 'CHAMBER_TEMP'), (6, 'CHAMBER_ROOM_TEMP'), (7, 'CHAMBER_FAN'), (8, 'CHAMBER_RESERVED1'), (9, 'BEER_TEMP')], default=0)),
                ('hardware', models.IntegerField(choices=[(0, 'NONE'), (1, 'PIN'), (2, 'ONEWIRE_TEMP'), (3, 'ONEWIRE_2413'), (4, 'ONEWIRE_2408/Valve')], default=2)),
                ('deactivated', models.IntegerField(default=0)),
                ('pin', models.IntegerField(default=0)),
                ('calibrate_adjust', models.FloatField(default=0.0)),
                ('pio', models.IntegerField(default=None, null=True)),
                ('invert', models.IntegerField(default=1)),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='NewControlConstants',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tempFormat', models.CharField(default='C', max_length=1)),
                ('heater1_kp', models.FloatField(help_text='Actuator output in % = Kp * input error')),
                ('heater1_ti', models.IntegerField()),
                ('heater1_td', models.IntegerField()),
                ('heater1_infilt', models.IntegerField()),
                ('heater1_dfilt', models.IntegerField()),
                ('heater2_kp', models.FloatField()),
                ('heater2_ti', models.IntegerField()),
                ('heater2_td', models.IntegerField()),
                ('heater2_infilt', models.IntegerField()),
                ('heater2_dfilt', models.IntegerField()),
                ('cooler_kp', models.FloatField()),
                ('cooler_ti', models.IntegerField()),
                ('cooler_td', models.IntegerField()),
                ('cooler_infilt', models.IntegerField()),
                ('cooler_dfilt', models.IntegerField()),
                ('beer2fridge_kp', models.FloatField()),
                ('beer2fridge_ti', models.IntegerField()),
                ('beer2fridge_td', models.IntegerField()),
                ('beer2fridge_infilt', models.IntegerField()),
                ('beer2fridge_dfilt', models.IntegerField()),
                ('beer2fridge_pidMax', models.FloatField()),
                ('minCoolTime', models.IntegerField()),
                ('minCoolIdleTime', models.IntegerField()),
                ('heater1PwmPeriod', models.IntegerField()),
                ('heater2PwmPeriod', models.IntegerField()),
                ('coolerPwmPeriod', models.IntegerField()),
                ('mutexDeadTime', models.IntegerField()),
                ('preset_name', models.CharField(blank=True, default='', max_length=255, null=True)),
                ('controller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.BrewPiDevice')),
            ],
        ),
        migrations.CreateModel(
            name='OldControlConstants',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tempSetMin', models.FloatField()),
                ('tempSetMax', models.FloatField()),
                ('Kp', models.FloatField()),
                ('Ki', models.FloatField()),
                ('Kd', models.FloatField()),
                ('pidMax', models.FloatField()),
                ('iMaxErr', models.FloatField()),
                ('idleRangeH', models.FloatField()),
                ('idleRangeL', models.FloatField()),
                ('heatTargetH', models.FloatField()),
                ('heatTargetL', models.FloatField()),
                ('coolTargetH', models.FloatField()),
                ('coolTargetL', models.FloatField()),
                ('maxHeatTimeForEst', models.FloatField()),
                ('maxCoolTimeForEst', models.FloatField()),
                ('beerFastFilt', models.FloatField()),
                ('beerSlowFilt', models.FloatField()),
                ('beerSlopeFilt', models.FloatField()),
                ('fridgeFastFilt', models.FloatField()),
                ('fridgeSlowFilt', models.FloatField()),
                ('fridgeSlopeFilt', models.FloatField()),
                ('lah', models.FloatField()),
                ('hs', models.FloatField()),
                ('preset_name', models.CharField(blank=True, default='', max_length=255, null=True)),
                ('controller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.BrewPiDevice')),
            ],
        ),
        migrations.CreateModel(
            name='FermentationProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('status', models.IntegerField(choices=[(1, 'Active'), (2, 'Pending Delete')], default=1)),
            ],
        ),
        migrations.CreateModel(
            name='FermentationProfilePoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ttl', models.DurationField(help_text='Time at which we should arrive at this temperature')),
                ('temperature_setting', models.DecimalField(decimal_places=2, help_text='The temperature the beer should be when TTL has passed', max_digits=5, null=True)),
                ('temp_format', models.CharField(default='F', max_length=1)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.FermentationProfile')),
            ],
        ),
        migrations.AlterModelOptions(
            name='beerlogpoint',
            options={'ordering': ['log_time']},
        ),
        migrations.AlterField(
            model_name='beerlogpoint',
            name='log_time',
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name='brewpidevice',
            name='active_profile',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.FermentationProfile'),
        ),
    ]
